/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from 'react';
import __beyond_dep_def_0 from 'react';
// draggable.tsx
declare namespace ns_0 {
  /// <reference types="react" />
  import IListProps = ns_6.IListProps;
  export function DraggableList<T>({
    specs,
    control,
    index,
    ...props
  }: IListProps<T>): JSX.Element;
}


// html-attributes.ts
declare namespace ns_1 {
  /**
   * Filters the properties of an object to include only those that are recognized HTML attributes, with the
   * capability to explicitly exclude certain attributes even if they are valid. The function checks for standard
   * attributes defined in the `htmlAttributes` set, and dynamically accepts any properties that begin with 'aria-'
   * or 'data-'. It excludes any properties listed in the `exclusions` array, regardless of their validity as HTML attributes.
   *
   * @param {Record<string, any>} props - The object containing properties that may or may not correspond to valid HTML attributes.
   * @param {string[]} exclusions - Array of property names to be excluded from the returned object, even if they are valid HTML attributes.
   * @returns {Record<string, any>} A new object containing only the properties that are valid HTML attributes and not listed in exclusions.
   */
  export function getAttributes(props: Record<string, any>, exclusions?: string[]): Record<string, any>;
}


// index.tsx
declare namespace ns_2 {
  import ReactElement = __beyond_dep_ns_0.ReactElement;
  import IListProps = ns_6.IListProps;
  export function List<T>({
    items,
    ...props
  }: IListProps<T>): ReactElement;
}


// item\dragable.tsx
declare namespace ns_3 {
  /// <reference types="react" />
  import IItemListProps = ns_6.IItemListProps;
  export function DraggableItem<T>({
    as,
    ...props
  }: IItemListProps<T>): JSX.Element;
}


// item\html.tsx
declare namespace ns_4 {
  import React = __beyond_dep_def_0;
  interface IHTMLItemProps {
    as?: keyof React.ReactHTML;
    children?: React.ReactNode;
  }
  export function HTMLItem({
    as,
    children,
    ...props
  }: IHTMLItemProps & Record<string, any>): JSX.Element;
  export {};
}


// item\index.tsx
declare namespace ns_5 {
  import React = __beyond_dep_def_0;
  import IItemListProps = ns_6.IItemListProps;
  export function ItemList<T>({
    specs,
    index,
    item,
    control,
    idx,
    as
  }: IItemListProps<T>): React.ReactElement<any, string | React.JSXElementConstructor<any>>;
}


// types.ts
declare namespace ns_6 {
  import ReactHTML = __beyond_dep_ns_0.ReactHTML;
  export interface IListProps<T> {
    items: T[];
    className?: string;
    index?: string;
    specs?: Record<string, any>;
    control?: string | React.ElementType<{
      data: T;
      index: number;
      item: T;
      specs: Record<string, any>;
    }>;
    childrenPosition?: 'top' | 'bottom';
    container?: keyof JSX.IntrinsicElements;
    as?: keyof ReactHTML;
    children?: React.ReactNode;
    draggable?: boolean;
    onReorder?: (items: T[]) => void;
  }
  export interface IItemListProps<T> {
    specs: Record<string, any>;
    index: string;
    as?: keyof ReactHTML;
    item: T;
    data?: T;
    idx: number;
    control?: string | React.ElementType<{
      data: T;
      index: number;
      item: T;
      specs: Record<string, any>;
    }>;
  }
}


export import List = ns_2.List;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };