/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/events/events';
// index.ts
declare namespace ns_0 {
  import Events = __beyond_dep_ns_0.Events;
  import ReactiveProps = ns_2.ReactiveProps;
  export abstract class ReactiveModel<T> extends Events {
    #private;
    [key: string]: any | undefined;
    protected schema: unknown;
    private debounceTimeout;
    private batchUpdates;
    protected properties: string[];
    fetching: boolean;
    fetched: boolean;
    processing: boolean;
    processed: boolean;
    loaded: boolean;
    get isReactive(): boolean;
    get ready(): boolean;
    set ready(value: boolean);
    get isUnpublished(): boolean;
    constructor(specs?: ReactiveProps<T>);
    initialValues(values?: Partial<ReactiveProps<T>>): Record<string, any>;
    protected reactiveProps(props: string[], values?: Record<string, any>): void;
    protected defineReactiveProp(propKey: string, initialValue: T[keyof T]): void;
    triggerEvent: (event?: string, delay?: number) => void;
    set(properties: Partial<T>, batch?: boolean): void;
    isSameObject: (a: any, b: any) => boolean;
    getProperties(): Record<string, any>;
  }
}


// interfaces\initial-values.ts
declare namespace ns_1 {
  /**
   * Interface for initial values that matches the structure of the generic type passed to the instance.
   * This interface defines a type that can hold any set of properties based on the provided generic type,
   * with their values being of the corresponding type. This enforces type safety by ensuring that the object
   * used as initial values has properties that exist on the generic type T, with each property being optional.
   *
   * @template T - The generic type representing the structure of the object, specifying properties and their types.
   */
  export interface IInitialValues<T> {
    [key: string]: any;
  }
}


// interfaces\reactive-constructor-specs.ts
declare namespace ns_2 {
  export type ReactiveProps<T> = Partial<Omit<T, 'properties'>> & {
    properties: string[];
  };
}


// interfaces\reactive-props.ts
declare namespace ns_3 {
  export interface IReactiveProperties {
    fetching: boolean;
    fetched: boolean;
    processing: boolean;
    processed: boolean;
    loaded: boolean;
    ready: boolean;
  }
  export interface IReactiveConstructorSpecs {
    properties?: string[];
    [prop: string]: any;
  }
}


// interfaces\reactive-public-props.ts
declare namespace ns_4 {
  export interface ReactiveModelPublic<T> {
    ready: boolean | undefined;
    fetching: boolean | undefined;
    fetched: boolean;
    processing: boolean;
    processed: boolean;
    loaded: boolean;
    [key: string]: any;
  }
}


export import ReactiveModel = ns_0.ReactiveModel;
export import IReactiveProperties = ns_3.IReactiveProperties;
export import ReactiveModelPublic = ns_4.ReactiveModelPublic;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };