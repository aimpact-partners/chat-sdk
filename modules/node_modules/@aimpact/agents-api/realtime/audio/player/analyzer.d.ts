/************
Processor: ts
************/

// constants.ts
declare namespace ns_0 {
  /**
   * Constants for help with visualization
   * Helps map frequency ranges from Fast Fourier Transform
   * to human-interpretable ranges, notably music ranges and
   * human vocal ranges.
   */
  /**
   * All note frequencies from 1st to 8th octave
   * in format "A#8" (A#, 8th octave)
   */
  export const noteFrequencies: number[];
  export const noteFrequencyLabels: string[];
  export const voiceFrequencies: number[];
  export const voiceFrequencyLabels: string[];
}


// index.ts
declare namespace ns_1 {
  type AnalysisType = 'frequency' | 'music' | 'voice';
  /**
   * Output of AudioAnalyzer for the frequency domain of the audio
   */
  export interface AudioAnalyzerOutputType {
    values: Float32Array;
    frequencies: number[];
    labels: string[];
  }
  /**
   * Analyzes audio for visual output
   */
  export class AudioAnalyzer {
    private fftResults;
    private audio;
    private context;
    private analyser;
    private sampleRate;
    private audioBuffer;
    constructor(audioElement: HTMLAudioElement, audioBuffer?: AudioBuffer | null);
    /**
     * Retrieves frequency domain data from an AnalyserNode adjusted to a decibel range
     * returns human-readable formatting and labels
     */
    static getFrequencies(analyser: AnalyserNode, sampleRate: number, fftResult?: Float32Array | null, analysisType?: AnalysisType, minDecibels?: number, maxDecibels?: number): AudioAnalyzerOutputType;
    /**
     * Gets the current frequency domain data from the playing audio track
     */
    getFrequencies(analysisType?: AnalysisType, minDecibels?: number, maxDecibels?: number): AudioAnalyzerOutputType;
    /**
     * Resume the internal AudioContext if it was suspended due to the lack of
     * user interaction when the AudioAnalyzer was instantiated.
     */
    resumeIfSuspended(): Promise<true>;
  }
  export {};
}


export import AudioAnalyzer = ns_1.AudioAnalyzer;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };