/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/events/events';
// dispatcher.ts
declare namespace ns_0 {
  import WorkletNode = ns_2.WorkletNode;
  import Events = __beyond_dep_ns_0.Events;
  export class WorkletDispatcher extends Events {
    #private;
    constructor(node: WorkletNode, timeout?: number);
    dispatch(method: string, data?: any): Promise<any>;
  }
}


// index.ts
declare namespace ns_1 {
  import Events = __beyond_dep_ns_0.Events;
  import WorkletNode = ns_2.WorkletNode;
  export abstract class WorkletBridge {
    #private;
    get context(): AudioContext;
    get node(): WorkletNode;
    get name(): string;
    get src(): string;
    get timeout(): number;
    get prepared(): boolean;
    get preparing(): boolean;
    get error(): Error;
    get _events(): Events;
    on(event: string, callback: (...data: any[]) => any): Events;
    off(event: string, callback: (...data: any[]) => any): Events;
    constructor(context: AudioContext, name: string, src: string, timeout?: number);
    check(): boolean;
    setup(): Promise<Error>;
    create(): void;
    connect(destination: AudioNode, output?: number, input?: number): AudioNode;
    disconnect(): void;
    _onmessage(e: MessageEvent): void;
    dispatch(method: string, data?: any): Promise<any>;
  }
}


// node.ts
declare namespace ns_2 {
  import WorkletBridge = ns_1.WorkletBridge;
  import WorkletDispatcher = ns_0.WorkletDispatcher;
  export class WorkletNode extends AudioWorkletNode {
    #private;
    get bridge(): WorkletBridge;
    get dispatcher(): WorkletDispatcher;
    constructor(bridge: WorkletBridge, context: AudioContext, name: string, timeout?: number);
  }
}


export import WorkletBridge = ns_1.WorkletBridge;
export import WorkletNode = ns_2.WorkletNode;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };