/************
Processor: ts
************/

// index.ts
declare namespace ns_0 {
  /**
   * Raw wav audio file contents
   */
  export interface WavPackerAudioType {
    blob: Blob;
    url: string;
    channelCount: number;
    sampleRate: number;
    duration: number;
  }
  /**
   * Utility class for assembling PCM16 "audio/wav" data
   */
  export class WavPacker {
    /**
     * Converts Float32Array of amplitude data to ArrayBuffer in Int16Array format
     * @param float32Array - Array of float audio values
     * @returns ArrayBuffer with Int16 values
     */
    static floatTo16BitPCM(float32Array: Float32Array): ArrayBuffer;
    /**
     * Concatenates two ArrayBuffers
     * @param leftBuffer - First buffer to concatenate
     * @param rightBuffer - Second buffer to concatenate
     * @returns Merged ArrayBuffer
     */
    static mergeBuffers(leftBuffer: ArrayBuffer, rightBuffer: ArrayBuffer): ArrayBuffer;
    /**
     * Packs data into an Int16 format
     * @private
     * @param size - 0 = 1x Int16, 1 = 2x Int16
     * @param arg - Value to pack
     * @returns Uint8Array representing packed data
     */
    private _packData;
    /**
     * Packs audio into "audio/wav" Blob
     * @param sampleRate - Sample rate of the audio
     * @param audio - Audio object containing bitsPerSample, channels, and data
     * @returns WavPackerAudioType containing blob, url, channelCount, sampleRate, and duration
     */
    pack(sampleRate: number, audio: {
      bitsPerSample: number;
      channels: Float32Array[];
      data: Int16Array;
    }): WavPackerAudioType;
  }
}


export import WavPacker = ns_0.WavPacker;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };