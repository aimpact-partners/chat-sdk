/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@aimpact/agents-api/realtime/audio/player/analyzer';
// index.ts
declare namespace ns_0 {
  type AnalysisType = 'frequency' | 'music' | 'voice';
  interface ISampleOffset {
    trackId: string | null;
    offset: number;
    currentTime: number;
  }
  /**
   * Plays audio streams received in raw PCM16 chunks from the browser
   */
  export class StreamPlayer {
    #private;
    get error(): Error;
    constructor({
      samplerate
    }?: {
      samplerate?: number;
    });
    /**
     * Connects the audio context and enables output to speakers
     * @returns
     */
    connect(): Promise<void>;
    /**
     * @TODO: Disconnect player
     */
    disconnect(): void;
    /**
     * Gets the current frequency domain data from the playing track
     */
    getFrequencies(analysisType?: AnalysisType, minDecibels?: number, maxDecibels?: number): __beyond_dep_ns_0.ns_1.AudioAnalyzerOutputType;
    /**
     * Adds 16BitPCM data to the currently playing audio stream
     * You can add chunks beyond the current play point and they will be queued for play
     */
    add16BitPCM(arrayBuffer: ArrayBuffer, trackId?: string): Int16Array;
    /**
     * Gets the offset (sample count) of the currently playing stream
     */
    getTrackSampleOffset(interrupt?: boolean): Promise<ISampleOffset>;
    /**
     * Strips the current stream and returns the sample offset of the audio
     */
    interrupt(): Promise<ISampleOffset>;
  }
  export {};
}


export import StreamPlayer = ns_0.StreamPlayer;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };