/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from 'ws';
import * as __beyond_dep_ns_1 from '@beyond-js/events/events';
// index.ts
declare namespace ns_0 {
  import WebSocketNode = __beyond_dep_ns_0.WebSocket;
  import Events = __beyond_dep_ns_1.Events;
  export type ChannelStatusType = 'closed' | 'connecting' | 'open' | 'closing' | 'error';
  /**
   * Interface defining settings for initializing the web socket.
   */
  export interface IChannelSettings {
    url: string;
    headers?: {
      [key: string]: string;
    } | string[];
  }
  export class Channel extends Events {
    #private;
    get ws(): WebSocketNode | WebSocket;
    static get browser(): boolean;
    get status(): ChannelStatusType;
    get error(): Error;
    constructor(settings: IChannelSettings);
    /**
     * Sends data through the WebSocket
     */
    send(data: any): void;
    connect(): Promise<boolean>;
    /**
     * Closes the WebSocket connection and waits for the close event.
     */
    close(): Promise<void>;
  }
}


export import ChannelStatusType = ns_0.ChannelStatusType;
export import IChannelSettings = ns_0.IChannelSettings;
export import Channel = ns_0.Channel;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };