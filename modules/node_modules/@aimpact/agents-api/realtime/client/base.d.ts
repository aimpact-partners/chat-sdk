/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@aimpact/agents-api/realtime/client/conversation';
import * as __beyond_dep_ns_1 from '@aimpact/agents-api/realtime/agents/base';
import * as __beyond_dep_ns_2 from '@beyond-js/events/events';
import * as __beyond_dep_ns_3 from '@aimpact/agents-api/realtime/audio/player';
import * as __beyond_dep_ns_4 from '@aimpact/agents-api/realtime/audio/recorder';
import * as __beyond_dep_ns_5 from '@beyond-js/kernel/core';
// active-conversation.ts
declare namespace ns_0 {
  import Conversation = __beyond_dep_ns_0.Conversation;
  import ClientSessionBase = ns_1.ClientSessionBase;
  export class ActiveConversation {
    #private;
    constructor(session: ClientSessionBase);
    set(conversation: Conversation): Promise<void>;
    process(event: string, data: any): void;
  }
}


// index.ts
declare namespace ns_1 {
  import IVoiceAudioDetection = __beyond_dep_ns_1.IVoiceAudioDetection;
  import AgentStatusType = __beyond_dep_ns_1.AgentStatusType;
  import Events = __beyond_dep_ns_2.Events;
  import VoiceAudioDetection = ns_4.VoiceAudioDetection;
  import ActiveConversation = ns_0.ActiveConversation;
  import Recorder = ns_2.Recorder;
  import StreamPlayer = __beyond_dep_ns_3.StreamPlayer;
  import Router = ns_3.Router;
  export abstract class ClientSessionBase extends Events {
    #private;
    abstract get status(): AgentStatusType;
    get conversation(): ActiveConversation;
    get router(): Router;
    get vad(): VoiceAudioDetection;
    get recorder(): Recorder;
    get player(): StreamPlayer;
    get valid(): boolean;
    constructor(agent: Events, session: Events, settings: {
      vad: IVoiceAudioDetection;
    });
    connect(): Promise<boolean>;
    close(): Promise<void>;
    abstract listen(data: {
      mono: Int16Array;
      raw: Int16Array;
    }): void;
  }
}


// recorder.ts
declare namespace ns_2 {
  import IDevice = __beyond_dep_ns_4.IDevice;
  import Events = __beyond_dep_ns_5.Events;
  export class Recorder extends Events {
    #private;
    get device(): IDevice;
    set device(device: IDevice);
    get status(): "error" | "starting" | "recording" | "pausing" | "paused" | "stopping" | "stopped";
    get error(): Error;
    record(): Promise<void>;
    pause(): Promise<void>;
    stop(): Promise<void>;
  }
}


// router.ts
declare namespace ns_3 {
  import ClientSessionBase = ns_1.ClientSessionBase;
  import Events = __beyond_dep_ns_2.Events;
  /**
   * The router routes the events from the agent (or the session of the agent), to
   * the client, or the conversation of the client.
   */
  export class Router {
    #private;
    get initialised(): boolean;
    constructor(client: ClientSessionBase, agent: Events, session: Events);
    initialise(): void;
    release(): void;
  }
}


// vad.ts
declare namespace ns_4 {
  import IVoiceAudioDetection = __beyond_dep_ns_1.IVoiceAudioDetection;
  import ClientSessionBase = ns_1.ClientSessionBase;
  export class VoiceAudioDetection {
    #private;
    get activated(): boolean;
    constructor(session: ClientSessionBase, value: IVoiceAudioDetection);
    fetch(): Promise<void>;
    /**
     * Switch between Manual <> VAD mode for communication
     */
    active(value: boolean): Promise<void>;
  }
}


export import ActiveConversation = ns_0.ActiveConversation;
export import ClientSessionBase = ns_1.ClientSessionBase;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };