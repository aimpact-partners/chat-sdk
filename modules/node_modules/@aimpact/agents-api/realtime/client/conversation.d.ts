/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@aimpact/agents-api/realtime/interfaces/agent-events';
import * as __beyond_dep_ns_1 from '@beyond-js/events/events';
// index.ts
declare namespace ns_0 {
  import ConversationItems = ns_2.ConversationItems;
  export class Conversation {
    #private;
    get id(): string;
    get items(): ConversationItems;
    constructor(id: string);
    fetch(): Promise<void>;
    _process(event: string, data: any, delta?: Int16Array): void;
  }
}


// item.ts
declare namespace ns_1 {
  import IAgentItem = __beyond_dep_ns_0.IAgentItem;
  import IAgentItemAudioDeltaEvent = __beyond_dep_ns_0.IAgentItemAudioDeltaEvent;
  import IUserSpeechStartedEvent = __beyond_dep_ns_0.IUserSpeechStartedEvent;
  export class Item {
    #private;
    get id(): string;
    get type(): "message" | "function_call";
    get role(): "function_call" | "user" | "assistant" | "function_output";
    get audio(): Int16Array;
    constructor(data: IAgentItem);
    onAudioDelta(data: IAgentItemAudioDeltaEvent, delta?: Int16Array): void;
    /**
     * This method can be useful in the future to store in memory in the client the audio of the item sent
     * by the user when speaking
     * @param data
     */
    onSpeechStarted(data: IUserSpeechStartedEvent): void;
  }
}


// items.ts
declare namespace ns_2 {
  import IAgentItem = __beyond_dep_ns_0.IAgentItem;
  import Events = __beyond_dep_ns_1.Events;
  export class ConversationItems extends Events {
    #private;
    get values(): IAgentItem[];
    process(event: string, data: any, delta?: Int16Array): void;
  }
}


export import Conversation = ns_0.Conversation;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };