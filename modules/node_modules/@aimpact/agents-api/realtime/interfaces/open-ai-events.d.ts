/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@aimpact/agents-api/realtime/interfaces/item';
// client\conversation-item\create.ts
declare namespace ns_0 {
  import IItem = __beyond_dep_ns_0.IItem;
  /**
   * Send this event when adding an item to the conversation.
   */
  export interface IConversationItemCreateClientEvent<IItemType extends IItem> {
    event_id?: string;
    type: 'conversation.item.create';
    previous_item_id?: string;
    item: IItemType;
  }
}


// client\conversation-item\delete.ts
declare namespace ns_1 {
  /**
   * Send this event when you want to remove any item from the conversation history.
   */
  export interface IConversationItemDeleteClientEvent {
    event_id: string;
    type: 'conversation.item.delete';
    item_id: string;
  }
}


// client\conversation-item\truncate.ts
declare namespace ns_2 {
  /**
   * Send this event when you want to truncate a previous assistant message’s audio.
   */
  export interface IConversationItemTruncateClientEvent {
    event_id: string;
    type: 'conversation.item.truncate';
    item_id: string;
    content_index: number;
    audio_end_ms: number;
  }
}


// client\input-audio-buffer\append.ts
declare namespace ns_3 {
  /**
   * Send this event to append audio bytes to the input audio buffer.
   */
  export interface IInputAudioBufferAppendClientEvent {
    event_id: string;
    type: 'input_audio_buffer.append';
    audio: string;
  }
}


// client\input-audio-buffer\clear.ts
declare namespace ns_4 {
  /**
   * Send this event to clear the audio bytes in the buffer.
   */
  export interface IInputAudioBufferClearClientEvent {
    event_id: string;
    type: 'input_audio_buffer.clear';
  }
}


// client\input-audio-buffer\commit.ts
declare namespace ns_5 {
  /**
   * Send this event to commit audio bytes to a user message.
   */
  export interface IInputAudioBufferCommitClientEvent {
    event_id: string;
    type: 'input_audio_buffer.commit';
  }
}


// client\response\cancel.ts
declare namespace ns_6 {
  /**
   * Send this event to cancel an in-progress response.
   */
  export interface IResponseCancelClientEvent {
    event_id: string;
    type: 'response.cancel';
  }
}


// client\response\create.ts
declare namespace ns_7 {
  import ISessionConfig = ns_41.ISessionConfig;
  /**
   * Send this event to trigger a response generation.
   */
  export interface IResponseCreateClientEvent {
    event_id: string;
    type: 'response.create';
    response: ISessionConfig;
  }
}


// client\session\update.ts
declare namespace ns_8 {
  import ISession = ns_41.ISession;
  /**
   * Send this event to update the session’s default configuration.
   */
  export interface ISessionUpdateClientEvent {
    event_id: string;
    type: 'session.update';
    session: ISession;
  }
}


// server\conversation\created.ts
declare namespace ns_9 {
  /**
   * Returned when a conversation is created. Emitted right after session creation.
   */
  export interface IConversationCreatedServerEvent {
    event_id: string;
    type: 'conversation.created';
    conversation: {
      id: string;
      object: 'realtime.conversation';
    };
  }
}


// server\conversation\item\created.ts
declare namespace ns_10 {
  import IItem = __beyond_dep_ns_0.IItem;
  /**
   * Returned when a conversation item is created.
   */
  export interface IConversationItemCreatedServerEvent {
    event_id: string;
    type: 'conversation.item.created';
    previous_item_id: string;
    item: IItem & {
      id: string;
      object: 'realtime.item';
    };
  }
}


// server\conversation\item\deleted.ts
declare namespace ns_11 {
  /**
   * Returned when an item in the conversation is deleted.
   */
  export interface IConversationItemDeletedServerEvent {
    event_id: string;
    type: 'conversation.item.deleted';
    item_id: string;
  }
}


// server\conversation\item\input-audio-transcription\completed.ts
declare namespace ns_12 {
  /**
   * Returned when input audio transcription is enabled and a transcription succeeds.
   */
  export interface IConversationInputAudioTranscriptionCompletedServerEvent {
    event_id: string;
    type: 'conversation.item.input_audio_transcription.completed';
    item_id: string;
    content_index: number;
    transcript: string;
  }
}


// server\conversation\item\input-audio-transcription\failed.ts
declare namespace ns_13 {
  import IServerError = ns_15.IServerError;
  /**
   * Returned when input audio transcription is configured, and a transcription request for a user message failed.
   */
  export interface IConversationInputAudioTranscriptionFailedServerEvent {
    event_id: string;
    type: 'conversation.item.input_audio_transcription.failed';
    item_id: string;
    content_index: number;
    error: IServerError;
  }
}


// server\conversation\item\truncated.ts
declare namespace ns_14 {
  /**
   * Returned when an earlier assistant audio message item is truncated by the client.
   */
  export interface IConversationItemTruncatedServerEvent {
    event_id: string;
    type: 'conversation.item.truncated';
    item_id: string;
    content_index: 0;
    audio_end_ms: 1500;
  }
}


// server\error.ts
declare namespace ns_15 {
  /**
   * Returned when an error occurs or used as the structure of the failed events as well.
   */
  export interface IServerError {
    event_id: string;
    type: string;
    code: string;
    message: string;
    param?: null;
  }
  /**
   * Event returned when an error occurs.
   */
  export interface IErrorServerEvent extends IServerError {
    type: 'error';
    error: IServerError;
  }
}


// server\input-audio-buffer\cleared.ts
declare namespace ns_16 {
  /**
   * Returned when the input audio buffer is cleared by the client.
   */
  export interface IInputAudioBufferClearedServerEvent {
    event_id: string;
    type: 'input_audio_buffer.cleared';
  }
}


// server\input-audio-buffer\commited.ts
declare namespace ns_17 {
  /**
   * Returned when an input audio buffer is committed, either by the client or automatically in server VAD mode.
   */
  export interface IInputAudioBufferCommitedServerEvent {
    event_id: string;
    type: 'input_audio_buffer.committed';
    previous_item_id: string;
    item_id: string;
  }
}


// server\input-audio-buffer\speech-started.ts
declare namespace ns_18 {
  /**
   * Returned in server turn detection mode when speech is detected.
   */
  export interface IInputAudioBufferSpeechStartedServerEvent {
    event_id: string;
    type: 'input_audio_buffer.speech_started';
    audio_start_ms: number;
    item_id: string;
  }
}


// server\input-audio-buffer\speech-stoped.ts
declare namespace ns_19 {
  /**
   * Returned in server turn detection mode when speech stops.
   */
  export interface IInputAudioBufferSpeechStoppedServerEvent {
    event_id: string;
    type: 'input_audio_buffer.speech_stopped';
    audio_end_ms: number;
    item_id: string;
  }
}


// server\response\audio-transcript\delta.ts
declare namespace ns_20 {
  /**
   * Returned when the model-generated transcription of audio output is updated.
   */
  export interface IResponseAudioTranscriptDeltaServerEvent {
    event_id: string;
    type: 'response.audio_transcript.delta';
    response_id: string;
    item_id: string;
    output_index: number;
    content_index: number;
    delta: string;
  }
}


// server\response\audio-transcript\done.ts
declare namespace ns_21 {
  /**
   * Returned when the model-generated transcription of audio output is done streaming.
   * Also emitted when a Response is interrupted, incomplete, or cancelled.
   */
  export interface IResponseAudioTranscriptDoneServerEvent {
    event_id: string;
    type: 'response.audio_transcript.done';
    response_id: string;
    item_id: string;
    output_index: number;
    content_index: number;
    transcript: string;
  }
}


// server\response\audio\delta.ts
declare namespace ns_22 {
  /**
   * Returned when the model-generated audio is updated.
   */
  export interface IResponseAudioDeltaServerEvent {
    event_id: string;
    type: 'response.audio.delta';
    response_id: string;
    item_id: string;
    output_index: number;
    content_index: number;
    delta: string;
  }
}


// server\response\audio\done.ts
declare namespace ns_23 {
  /**
   * Returned when the model-generated audio is done.
   * Also emitted when a Response is interrupted, incomplete, or cancelled.
   */
  export interface IResponseAudioDoneServerEvent {
    event_id: string;
    type: 'response.audio.done';
    response_id: string;
    item_id: string;
    output_index: number;
    content_index: number;
  }
}


// server\response\content-part\added.ts
declare namespace ns_24 {
  import IPart = ns_26.IPart;
  /**
   * Returned when a new content part is added to an assistant message item during response generation.
   */
  export interface IResponseContentPartAddedServerEvent {
    event_id: string;
    type: 'response.content_part.added';
    response_id: string;
    item_id: string;
    output_index: number;
    content_index: number;
    part: IPart;
  }
}


// server\response\content-part\done.ts
declare namespace ns_25 {
  import IPart = ns_26.IPart;
  /**
   * Returned when a content part is done streaming in an assistant message item.
   * Also emitted when a Response is interrupted, incomplete, or cancelled.
   */
  export interface IResponseContentPartDoneServerEvent {
    event_id: string;
    type: 'response.content_part.done';
    response_id: string;
    item_id: string;
    output_index: number;
    content_index: number;
    part: IPart;
  }
}


// server\response\content-part\part.ts
declare namespace ns_26 {
  export interface IPart {
    type: 'text' | 'audio';
    text?: '';
    audio?: string;
    transcript: string;
  }
}


// server\response\created.ts
declare namespace ns_27 {
  import IRealtimeResponse = ns_34.IRealtimeResponse;
  /**
   * Returned when a new Response is created.
   * The first event of response creation, where the response is in an initial state of "in_progress".
   */
  export interface IResponseCreatedServerEvent {
    event_id: string;
    type: 'response.created';
    response: IRealtimeResponse & {
      status: 'in_progress';
    };
  }
}


// server\response\done.ts
declare namespace ns_28 {
  import IRealtimeResponse = ns_34.IRealtimeResponse;
  export type IResponseDoneStatus = 'in_progress' | 'incomplete' | 'completed' | 'cancelled' | 'failed';
  /**
   * Returned when a Response is done streaming. Always emitted, no matter the final state.
   */
  export interface IResponseDoneServerEvent {
    event_id: string;
    type: 'response.done';
    response: IRealtimeResponse & {
      status: IResponseDoneStatus;
    };
  }
}


// server\response\function-call-arguments\delta.ts
declare namespace ns_29 {
  /**
   * Returned when the model-generated function call arguments are updated.
   */
  export interface IResponseFunctionCallArgumentsDeltaServerEvent {
    event_id: string;
    type: 'response.function_call_arguments.delta';
    response_id: string;
    item_id: string;
    output_index: number;
    call_id: number;
    delta: string;
  }
}


// server\response\function-call-arguments\done.ts
declare namespace ns_30 {
  /**
   * Returned when the model-generated function call arguments are done streaming.
   * Also emitted when a Response is interrupted, incomplete, or cancelled.
   */
  export interface IResponseAudioContentPartDoneServerEvent {
    event_id: string;
    type: 'response.function_call_arguments.done';
    response_id: string;
    item_id: string;
    output_index: number;
    call_id: number;
    arguments: string;
  }
}


// server\response\output-item\added.ts
declare namespace ns_31 {
  import IResponseItem = __beyond_dep_ns_0.IResponseItem;
  /**
   * Returned when a new Item is created during response generation.
   */
  export interface IResponseOutputItemAddedServerEvent {
    event_id: string;
    type: 'response.output_item.added';
    response_id: string;
    output_index: number;
    item: IResponseItem & {
      status: 'in_progress' | 'completed';
    };
  }
}


// server\response\output-item\done.ts
declare namespace ns_32 {
  import IResponseItem = __beyond_dep_ns_0.IResponseItem;
  /**
   * Returned when an Item is done streaming.
   * Also emitted when a Response is interrupted, incomplete, or cancelled.
   */
  export interface IResponseOutputItemDoneServerEvent {
    event_id: string;
    type: 'response.output_item.done';
    response_id: string;
    output_index: number;
    item: IResponseItem & {
      status: 'completed' | 'incomplete';
    };
  }
}


// server\response\rate-limits\updated.ts
declare namespace ns_33 {
  /**
   * Emitted after every "response.done" event to indicate the updated rate limits.
   */
  export interface IResponseRateLimitsUpdatedServerEvent {
    event_id: string;
    type: 'rate_limits.updated';
    rate_limits: {
      name: 'requests' | 'tokens' | 'input_tokens' | 'output_tokens';
      limit: 1000;
      remaining: 999;
      reset_seconds: 60;
    }[];
  }
}


// server\response\response.ts
declare namespace ns_34 {
  import IResponseItem = __beyond_dep_ns_0.IResponseItem;
  /**
   * The response resource.
   */
  export interface IRealtimeResponse {
    id: string;
    object: 'realtime.response';
    status: string;
    status_details: object;
    output: IResponseItem[];
    usage?: {
      total_tokens: number;
      input_tokens: number;
      output_tokens: number;
    };
  }
}


// server\response\text\delta.ts
declare namespace ns_35 {
  /**
   * Returned when the text value of a "text" content part is updated.
   */
  export interface IResponseTextDeltaServerEvent {
    event_id: string;
    type: 'response.text.delta';
    response_id: string;
    item_id: string;
    output_index: number;
    content_index: number;
    delta: string;
  }
}


// server\response\text\done.ts
declare namespace ns_36 {
  /**
   * Returned when the text value of a "text" content part is done streaming.
   * Also emitted when a Response is interrupted, incomplete, or cancelled.
   */
  export interface IResponseTextDoneServerEvent {
    event_id: string;
    type: 'response.text.done';
    response_id: string;
    item_id: string;
    output_index: number;
    content_index: number;
    text: string;
  }
}


// server\session\created.ts
declare namespace ns_37 {
  import ISession = ns_41.ISession;
  /**
   * Returned when a session is created. Emitted automatically when a new connection is established.
   */
  export interface ISessionCreatedServerEvent {
    event_id: string;
    type: 'session.created';
    session: ISession & {
      id: string;
      object: 'realtime.session';
      model: string;
    };
  }
}


// server\session\updated.ts
declare namespace ns_38 {
  import ISession = ns_41.ISession;
  /**
   * Returned when a session is updated.
   */
  export interface ISessionUpdatedServerEvent {
    event_id: string;
    type: 'session.updated';
    session: ISession & {
      id: string;
      object: 'realtime.session';
      model: string;
    };
  }
}


// session\audio-format.ts
declare namespace ns_39 {
  export type AudioFormatType = 'pcm16' | 'g711_ulaw' | 'g711_alaw';
}


// session\audio-transcription.ts
declare namespace ns_40 {
  export type AudioTranscriptionsType = 'whisper-1';
  export interface IInputAudioTranscription {
    enabled: boolean;
    model: AudioTranscriptionsType;
  }
}


// session\index.ts
declare namespace ns_41 {
  import ITool = ns_42.ITool;
  import ToolChoiceType = ns_42.ToolChoiceType;
  import AudioFormatType = ns_39.AudioFormatType;
  import VoicesType = ns_44.VoicesType;
  import IInputAudioTranscription = ns_40.IInputAudioTranscription;
  import ITurnDetectionServer = ns_43.ITurnDetectionServer;
  export interface ISessionConfig {
    modalities: 'text' | 'audio'[];
    instructions: string;
    voice: VoicesType;
    output_audio_format: AudioFormatType;
    tools: ITool[];
    tool_choice: ToolChoiceType;
    temperature: number;
    max_output_tokens?: number | 'inf';
  }
  export interface ISession extends ISessionConfig {
    input_audio_format: AudioFormatType;
    input_audio_transcription?: IInputAudioTranscription;
    turn_detection: ITurnDetectionServer;
  }
}


// session\tool.ts
declare namespace ns_42 {
  export type IToolParameterType = {
    type: 'object';
    properties: Record<string, {
      type: 'string';
    }>;
    required?: string[];
  };
  /**
   * Tools (functions) available to the model.
   */
  export interface ITool {
    type: 'function';
    name: string;
    description: string;
    parameters: {
      [key: string]: any;
    };
  }
  /**
   * How the model chooses tools.
   */
  export type ToolChoiceType = 'auto' | 'none' | 'required' | {
    type: 'function';
    name: string;
  };
}


// session\turn-detection.ts
declare namespace ns_43 {
  export interface ITurnDetectionServer {
    type: 'server_vad' | 'none';
    threshold?: number;
    prefix_padding_ms?: number;
    silence_duration_ms?: number;
  }
}


// session\voices.ts
declare namespace ns_44 {
  export type VoicesType = 'alloy' | 'shimmer' | 'echo';
}


export import IConversationItemCreateClientEvent = ns_0.IConversationItemCreateClientEvent;
export import IConversationItemDeleteClientEvent = ns_1.IConversationItemDeleteClientEvent;
export import IConversationItemTruncateClientEvent = ns_2.IConversationItemTruncateClientEvent;
export import IInputAudioBufferAppendClientEvent = ns_3.IInputAudioBufferAppendClientEvent;
export import IInputAudioBufferClearClientEvent = ns_4.IInputAudioBufferClearClientEvent;
export import IInputAudioBufferCommitClientEvent = ns_5.IInputAudioBufferCommitClientEvent;
export import IResponseCancelClientEvent = ns_6.IResponseCancelClientEvent;
export import IResponseCreateClientEvent = ns_7.IResponseCreateClientEvent;
export import ISessionUpdateClientEvent = ns_8.ISessionUpdateClientEvent;
export import IConversationCreatedServerEvent = ns_9.IConversationCreatedServerEvent;
export import IConversationItemCreatedServerEvent = ns_10.IConversationItemCreatedServerEvent;
export import IConversationItemDeletedServerEvent = ns_11.IConversationItemDeletedServerEvent;
export import IConversationInputAudioTranscriptionCompletedServerEvent = ns_12.IConversationInputAudioTranscriptionCompletedServerEvent;
export import IConversationInputAudioTranscriptionFailedServerEvent = ns_13.IConversationInputAudioTranscriptionFailedServerEvent;
export import IConversationItemTruncatedServerEvent = ns_14.IConversationItemTruncatedServerEvent;
export import IServerError = ns_15.IServerError;
export import IErrorServerEvent = ns_15.IErrorServerEvent;
export import IInputAudioBufferClearedServerEvent = ns_16.IInputAudioBufferClearedServerEvent;
export import IInputAudioBufferCommitedServerEvent = ns_17.IInputAudioBufferCommitedServerEvent;
export import IInputAudioBufferSpeechStartedServerEvent = ns_18.IInputAudioBufferSpeechStartedServerEvent;
export import IInputAudioBufferSpeechStoppedServerEvent = ns_19.IInputAudioBufferSpeechStoppedServerEvent;
export import IResponseAudioTranscriptDeltaServerEvent = ns_20.IResponseAudioTranscriptDeltaServerEvent;
export import IResponseAudioTranscriptDoneServerEvent = ns_21.IResponseAudioTranscriptDoneServerEvent;
export import IResponseAudioDeltaServerEvent = ns_22.IResponseAudioDeltaServerEvent;
export import IResponseAudioDoneServerEvent = ns_23.IResponseAudioDoneServerEvent;
export import IResponseContentPartAddedServerEvent = ns_24.IResponseContentPartAddedServerEvent;
export import IResponseContentPartDoneServerEvent = ns_25.IResponseContentPartDoneServerEvent;
export import IPart = ns_26.IPart;
export import IResponseCreatedServerEvent = ns_27.IResponseCreatedServerEvent;
export import IResponseDoneStatus = ns_28.IResponseDoneStatus;
export import IResponseDoneServerEvent = ns_28.IResponseDoneServerEvent;
export import IResponseFunctionCallArgumentsDeltaServerEvent = ns_29.IResponseFunctionCallArgumentsDeltaServerEvent;
export import IResponseAudioContentPartDoneServerEvent = ns_30.IResponseAudioContentPartDoneServerEvent;
export import IResponseOutputItemAddedServerEvent = ns_31.IResponseOutputItemAddedServerEvent;
export import IResponseOutputItemDoneServerEvent = ns_32.IResponseOutputItemDoneServerEvent;
export import IResponseRateLimitsUpdatedServerEvent = ns_33.IResponseRateLimitsUpdatedServerEvent;
export import IRealtimeResponse = ns_34.IRealtimeResponse;
export import IResponseTextDeltaServerEvent = ns_35.IResponseTextDeltaServerEvent;
export import IResponseTextDoneServerEvent = ns_36.IResponseTextDoneServerEvent;
export import ISessionCreatedServerEvent = ns_37.ISessionCreatedServerEvent;
export import ISessionUpdatedServerEvent = ns_38.ISessionUpdatedServerEvent;
export import AudioFormatType = ns_39.AudioFormatType;
export import AudioTranscriptionsType = ns_40.AudioTranscriptionsType;
export import IInputAudioTranscription = ns_40.IInputAudioTranscription;
export import ISessionConfig = ns_41.ISessionConfig;
export import ISession = ns_41.ISession;
export import IToolParameterType = ns_42.IToolParameterType;
export import ITool = ns_42.ITool;
export import ToolChoiceType = ns_42.ToolChoiceType;
export import ITurnDetectionServer = ns_43.ITurnDetectionServer;
export import VoicesType = ns_44.VoicesType;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };