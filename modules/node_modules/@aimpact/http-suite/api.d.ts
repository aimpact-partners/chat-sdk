/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/kernel/core';
import * as __beyond_dep_ns_1 from '@beyond-js/reactive/model';
// api.ts
declare namespace ns_0 {
  import Events = __beyond_dep_ns_0.Events;
  export class Api extends Events {
    #private;
    get url(): any;
    get actions(): string[];
    get streamResponse(): string;
    get metadata(): {
      value: object;
      error?: string;
    };
    get stringContent(): string;
    constructor(url: any);
    action(method: string, route: string, specs?: object): Promise<any>;
    getURL(route: string): string;
    bearer(bearer: any): this;
    get(route: string, specs?: object): Promise<any>;
    post(route: string, specs: object): Promise<any>;
    put(route: string, specs: object): Promise<any>;
    delete(route: string, specs?: object): Promise<any>;
    stream(route: string, specs?: object): Promise<any>;
  }
}


// fetcher.ts
declare namespace ns_1 {
  import ReactiveModel = __beyond_dep_ns_1.ReactiveModel;
  import IHeaders = ns_3.IHeaders;
  import IResponse = ns_3.IResponse;
  export class Fetcher extends ReactiveModel<Fetcher> {
    #private;
    private readonly streamer;
    private formDataInstance?;
    private customHeaders;
    private defaultHeaders;
    constructor();
    get actions(): string[];
    get streamResponse(): string;
    get stringContent(): string;
    get metadata(): {
      value: object;
      error?: string;
    };
    bearer(token: string | undefined): this;
    setHeaders(headers: IHeaders): this;
    private getHeaders;
    private createFormData;
    private processGetParams;
    private processParams;
    execute<T = any>(url: string, method?: string, params?: Record<string, any>, stream?: boolean): Promise<IResponse<T>>;
    stream<T = any>(url: string, params?: Record<string, any>): Promise<IResponse<T>>;
    get<T = any>(url: string, params?: Record<string, any>): Promise<IResponse<T>>;
    post<T = any>(url: string, params?: Record<string, any>): Promise<IResponse<T>>;
    delete<T = any>(url: string, params?: Record<string, any>): Promise<IResponse<T>>;
    put<T = any>(url: string, params?: Record<string, any>): Promise<IResponse<T>>;
  }
}


// stream.ts
declare namespace ns_2 {
  import IResponse = ns_3.IResponse;
  type Metadata = {
    value: object | undefined;
    error?: string;
  } | undefined;
  export class Stream {
    #private;
    get metadata(): Metadata;
    get actions(): string[];
    get response(): string;
    constructor(parent: any);
    get stringContent(): string;
    handleStart(chunk: string, response: string): string;
    handleEnd(chunk: string, response: string): string;
    execute<T>(url: any, specs: any): Promise<IResponse<T>>;
  }
  export {};
}


// types.ts
declare namespace ns_3 {
  export interface IHeaders {
    'Content-Type': string;
    Authorization?: string;
  }
  export interface IResponse<T = any> {
    status: boolean;
    data?: T;
    error?: string;
    errors?: any[];
  }
}


export import Api = ns_0.Api;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };