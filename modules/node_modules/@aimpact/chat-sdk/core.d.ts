/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@aimpact/reactive/model';
import * as __beyond_dep_ns_1 from '@aimpact/reactive/entities/collection';
import * as __beyond_dep_ns_2 from '@aimpact/reactive/entities/item';
import * as __beyond_dep_ns_3 from '@aimpact/http-suite/api';
// chats\collection\index.ts
declare namespace ns_0 {
  import ReactiveModel = __beyond_dep_ns_0.ReactiveModel;
  export class Chats extends ReactiveModel<Chats> {
    #private;
    constructor();
    get items(): any[];
    load(): Promise<{
      status: any;
      data: any;
    }>;
    addItem(item: any): Promise<void>;
  }
}


// chats\collection\provider.ts
declare namespace ns_1 {
  import ICollectionProvider = __beyond_dep_ns_1.ICollectionProvider;
  import Chats = ns_0.Chats;
  export class ChatCollectionProvider implements Partial<ICollectionProvider> {
    #private;
    constructor(parent: Chats);
    list(): Promise<{
      status: any;
      data: any;
    }>;
  }
}


// chats\interfaces\chat.ts
declare namespace ns_2 {
  import Chat = ns_4.Chat;
  export interface IChatProperties {
    name: string;
    userId: string;
    language: {
      default: string;
    };
    knowledgeBoxId?: string;
  }
  export interface IChat {
    id: string;
    name: string;
    userId: string;
    category: string;
    system: string;
    parent: string;
    knowledgeBoxId: string;
    messages: any;
    usage: {
      completionTokens: number;
      promptTokens: number;
      totalTokens: number;
    };
    metadata: {};
  }
  export interface IChats {
    items: Chat[];
  }
}


// chats\interfaces\message.ts
declare namespace ns_3 {
  import Chat = ns_4.Chat;
  export interface IMessage {
    id?: any;
    chat?: {
      id: string;
    } | Chat;
    chatId?: string;
    content?: string;
    role?: 'user' | 'system';
    audio?: Blob;
    streaming: boolean;
    timestamp?: number;
    actions?: any[];
    language?: string;
    format?: 'audio' | 'text';
    userId: string;
    type: 'message' | 'answer';
    usage?: {
      completionTokens: number;
      promptTokens: number;
      totalTokens: number;
    };
  }
  export interface IMessageSpecs {
    chatId: string;
    systemId?: string;
    id: string;
    chat?: Chat;
    timestamp?: number;
    role: string;
    content?: string;
    multipart?: boolean;
    audio?: Blob;
    streaming: boolean;
    type: 'message' | 'answer';
  }
  /**
   * Represents the optional specs needed to create a new message
   * @param id - The id of the message
   * @param chat - The chat the message belongs to
   */
  export interface IMessageConstructorSpecs extends IMessage {
    id?: string;
    chat?: Chat;
  }
}


// chats\item\index.ts
declare namespace ns_4 {
  import Item = __beyond_dep_ns_2.Item;
  import Api = __beyond_dep_ns_3.Api;
  import Message = ns_7.Message;
  import Messages = ns_6.Messages;
  import IChat = ns_2.IChat;
  export class Chat extends Item<IChat> {
    #private;
    id: string;
    fetching: boolean;
    triggerEvent: () => void;
    language: any;
    audioplay: boolean;
    userId: string;
    system: any;
    parent: any;
    category: any;
    usage: any;
    children: any;
    user: any;
    knowledgeBoxId: string;
    metadata: any;
    get api(): Api;
    get messages(): Messages;
    constructor({
      id,
      ...specs
    }?: {
      id?: any;
    });
    loadAll: (specs: any) => Promise<void>;
    getData(): Partial<IChat>;
    sendMessage(content: string): Promise<Message>;
    sendAudio(message: Blob): Promise<Message>;
    transcribe(audio: Blob): Promise<any>;
    getMessage(id: string): Message;
    response(data: any): {
      status: boolean;
      data: any;
    };
    create(): Promise<void>;
  }
}


// chats\item\provider.ts
declare namespace ns_5 {
  import IEntityProvider = __beyond_dep_ns_2.IEntityProvider;
  import Chat = ns_4.Chat;
  export class ChatProvider implements IEntityProvider {
    #private;
    constructor(parent: Chat);
    load(specs: any): Promise<any>;
  }
}


// chats\messages\index.ts
declare namespace ns_6 {
  import ReactiveModel = __beyond_dep_ns_0.ReactiveModel;
  import Message = ns_7.Message;
  export class Messages extends ReactiveModel<Messages> {
    #private;
    item: typeof Message;
    get items(): Message[];
    constructor();
    setEntries(data: any): void;
    get(id: string): Message;
    add(item: any): void;
    getData(): Partial<IMessage>[];
    has(id: string): boolean;
  }
}


// chats\messages\item.ts
declare namespace ns_7 {
  import ReactiveModel = __beyond_dep_ns_0.ReactiveModel;
  import IMessage = ns_3.IMessage;
  import IMessageSpecs = ns_3.IMessageSpecs;
  import Messages = ns_6.Messages;
  export class Message extends ReactiveModel<IMessage> implements Partial<IMessage> {
    #private;
    autoplay: boolean;
    id: string;
    triggerEvent: () => void;
    content: string;
    messages: Messages;
    localFields: string[];
    audio: Blob;
    get response(): string;
    get type(): "message" | "answer";
    constructor({
      id,
      chat,
      ...specs
    }: Partial<IMessageSpecs>);
  }
}


export import Chats = ns_0.Chats;
export import IChatProperties = ns_2.IChatProperties;
export import IChat = ns_2.IChat;
export import Chat = ns_4.Chat;
export import Messages = ns_6.Messages;
export import Message = ns_7.Message;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };