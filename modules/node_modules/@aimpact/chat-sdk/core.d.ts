/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/reactive/entities';
import * as __beyond_dep_ns_1 from '@beyond-js/reactive/model';
// chats\collection\index.ts
declare namespace ns_0 {
  import Collection = __beyond_dep_ns_0.Collection;
  export class Chats extends Collection {
    constructor();
  }
}


// chats\collection\provider.ts
declare namespace ns_1 {
  import IProvider = __beyond_dep_ns_0.IProvider;
  import Chats = ns_0.Chats;
  export class ChatCollectionProvider implements IProvider {
    #private;
    constructor(parent: Chats);
    list(): Promise<{
      status: any;
      data: any;
    }>;
  }
}


// chats\interfaces\chat.ts
declare namespace ns_2 {
  import Chat = ns_5.Chat;
  export interface IChatProperties {
    name: string;
    userId: string;
    language: {
      default: string;
    };
    knowledgeBoxId?: string;
  }
  export interface IChat {
    id: string;
    name: string;
    userId: string;
    category: string;
    system: string;
    parent: string;
    knowledgeBoxId: string;
    usage: {
      completionTokens: number;
      promptTokens: number;
      totalTokens: number;
    };
    metadata: {};
  }
  export interface IChats {
    items: Chat[];
  }
}


// chats\interfaces\message.ts
declare namespace ns_3 {
  import Chat = ns_5.Chat;
  export interface IMessage {
    id?: any;
    chat?: {
      id: string;
    } | Chat;
    chatId?: string;
    content?: string;
    role?: string;
    audio?: Blob;
    timestamp?: number;
    language?: string;
    type?: 'audio' | 'text';
    usage?: {
      completionTokens: number;
      promptTokens: number;
      totalTokens: number;
    };
  }
  export interface IMessageSpecs {
    chatId: string;
    systemId: string;
    id: string;
    timestamp?: number;
    role: string;
    content?: string;
    multipart?: boolean;
    audio?: Blob;
  }
  /**
   * Represents the optional specs needed to create a new message
   * @param id - The id of the message
   * @param chat - The chat the message belongs to
   */
  export interface IMessageConstructorSpecs extends IMessage {
    id?: string;
    chat?: Chat;
  }
}


// chats\item\index copy.ts
declare namespace ns_4 {}


// chats\item\index.ts
declare namespace ns_5 {
  import Item = __beyond_dep_ns_0.Item;
  import Message = ns_8.Message;
  import Messages = ns_7.Messages;
  import IChat = ns_2.IChat;
  export class Chat extends Item<IChat> {
    #private;
    id: string;
    protected properties: string[];
    localdb: boolean;
    fetching: boolean;
    get messages(): Messages;
    constructor({
      id
    }?: {
      id?: any;
    });
    loadAll: (specs: any) => Promise<void>;
    sendMessage(content: string): Promise<Message>;
    getMessage(id: string): Message;
  }
}


// chats\item\provider.ts
declare namespace ns_6 {
  import IProvider = __beyond_dep_ns_0.IProvider;
  import Chat = ns_5.Chat;
  export class ChatProvider implements IProvider {
    #private;
    constructor(parent: Chat);
    load(specs: any): Promise<{
      status: any;
      data: any;
    }>;
  }
}


// chats\messages\index.ts
declare namespace ns_7 {
  import Message = ns_8.Message;
  import ReactiveModel = __beyond_dep_ns_1.ReactiveModel;
  export class Messages extends ReactiveModel<Messages> {
    #private;
    item: typeof Message;
    get items(): Message[];
    constructor();
    setEntries(data: any): void;
    get(id: string): Message;
    add(item: any): void;
  }
}


// chats\messages\item.ts
declare namespace ns_8 {
  import ReactiveModel = __beyond_dep_ns_1.ReactiveModel;
  import IMessage = ns_3.IMessage;
  import IMessageConstructorSpecs = ns_3.IMessageConstructorSpecs;
  export class Message extends ReactiveModel<IMessage> {
    #private;
    autoplay: boolean;
    id: string;
    triggerEvent: () => void;
    localFields: string[];
    get response(): string;
    constructor({
      id,
      chat,
      ...specs
    }: IMessageConstructorSpecs);
  }
}


export import Chats = ns_0.Chats;
export import IChatProperties = ns_2.IChatProperties;
export import IChat = ns_2.IChat;
export import _Chat = ns_4._Chat;
export import Chat = ns_5.Chat;
export import Message = ns_8.Message;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };