/************
Processor: ts
************/

import __beyond_dep_def_0 from 'react';
// button\PlayerButton.tsx
declare namespace ns_0 {
  import React = __beyond_dep_def_0;
  export function PlayerButton(props: any): React.JSX.Element;
}


// code\clipboard.tsx
declare namespace ns_1 {
  import React = __beyond_dep_def_0;
  export function Clipboard({
    text,
    message
  }: {
    text: any;
    message: any;
  }): React.JSX.Element;
}


// code\code.tsx
declare namespace ns_2 {
  import React = __beyond_dep_def_0;
  export function Code({
    language,
    children,
    clipboard
  }: {
    language?: string;
    children: any;
    clipboard?: boolean;
  }): React.JSX.Element;
}


// parse-content.ts
declare namespace ns_3 {
  type ContentBlock = {
    content: string;
    type: string;
  };
  type Action = {
    type: string;
    data: {
      [key: string]: any;
    };
  };
  export type TextParsed = [ContentBlock[]?, string?, Action[]?];
  /**
   *
   * @param key
   * @param content
   * @param ACTIONS
   * @returns
   */
  export const parseText: (key: any, content: string, ACTIONS: string[]) => TextParsed;
  export {};
}


// playable\index.tsx
declare namespace ns_4 {
  import React = __beyond_dep_def_0;
  import IPlayableProps = ns_5.IPlayableProps;
  function PlayableComponent({
    className,
    id,
    playable,
    content,
    player,
    onClickWord
  }: IPlayableProps): React.JSX.Element;
  export const Playable: React.MemoExoticComponent<typeof PlayableComponent>;
  export {};
}


// playable\interfaces\playable-props.ts
declare namespace ns_5 {
  export interface IPlayableItemProps {
    id: string;
    block: any;
    text: string;
    index: number;
    playable: boolean;
    player: any;
    onClickWord?: (e?: any) => void;
  }
  export interface IPlayableProps {
    id: string;
    content: string;
    autoplay?: boolean;
    player: any;
    playable?: boolean;
    onClickWord?: (e?: any) => void;
    types?: string[];
    toolTexts?: Record<string, string>;
    className?: string;
  }
}


// playable\item.tsx
declare namespace ns_6 {
  import React = __beyond_dep_def_0;
  import IPlayableItemProps = ns_5.IPlayableItemProps;
  /**
   * A  text message can contains more than one block of text,
   * the "block" value represents the number of the block, usually the value
   * is 0 at least you have a message with code blocks.
   *
   */
  export const PlayableItem: ({
    block,
    text,
    id,
    index,
    playable,
    player,
    onClickWord
  }: IPlayableItemProps) => React.JSX.Element;
}


// use-boundary.tsx
declare namespace ns_7 {
  import React = __beyond_dep_def_0;
  export function useBoundary(id: any, player: any, content: any): {
    ref: React.MutableRefObject<any>;
    text: any;
    removeHighlight: () => void;
  };
}


export import PlayerButton = ns_0.PlayerButton;
export import parseText = ns_3.parseText;
export import Playable = ns_4.Playable;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };