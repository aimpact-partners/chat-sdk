/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@tiptap/react';
import * as __beyond_dep_ns_1 from 'react';
// menus\bubble.tsx
declare namespace ns_0 {
  import Editor = __beyond_dep_ns_0.Editor;
  interface IBubbleMenuProps {
    editor: Editor;
  }
  export const BubbleMenuContent: ({
    editor
  }: IBubbleMenuProps) => JSX.Element;
  export {};
}


// menus\floating.tsx
declare namespace ns_1 {
  import Editor = __beyond_dep_ns_0.Editor;
  interface IFloatingMenuProps {
    editor: Editor;
  }
  export const FloatingMenuContent: ({
    editor
  }: IFloatingMenuProps) => JSX.Element;
  export {};
}


// menus\index.ts
declare namespace ns_2 {
  export { BubbleMenuContent } from './bubble';
  export { FloatingMenuContent } from './floating';
}


// toolbar\actions.ts
declare namespace ns_3 {
  import Editor = __beyond_dep_ns_0.Editor;
  import IButton = ns_5.IButton;
  /**
   * Generates button action based on standard pattern
   */
  export const generateButtonAction: (button: IButton) => (editor: Editor) => void;
  /**
   * Generates button active state
   */
  export const generateButtonIsActive: (button: IButton) => (editor: Editor) => boolean;
  /**
   * Generates button icon
   */
  export const generateButtonIcon: (button: IButton) => string | JSX.Element;
}


// toolbar\button.tsx
declare namespace ns_4 {
  import IButton = ns_5.IButton;
  interface IButtonProps {
    button: IButton;
    editor: any;
  }
  export const Button: ({
    button,
    editor
  }: IButtonProps) => JSX.Element;
  export {};
}


// toolbar\config.ts
declare namespace ns_5 {
  import Editor = __beyond_dep_ns_0.Editor;
  export interface IButton {
    id: string;
    label: string;
    title: string;
    group: 'text' | 'style-selector' | 'lists' | 'blocks' | 'formatting';
    icon?: string | JSX.Element;
    action?: (editor: Editor) => void;
    isActive?: (editor: Editor) => boolean;
    extensionName?: string;
    actionType?: 'toggle' | 'set' | 'custom';
    isComponent?: boolean;
    component?: string;
  }
  export const BUTTONS: IButton[];
  export const GROUPS: {
    readonly text: "Text formatting";
    readonly 'style-selector': "Text styles";
    readonly lists: "Lists";
    readonly blocks: "Blocks";
    readonly formatting: "Formatting";
  };
}


// toolbar\editor-commands.ts
declare namespace ns_6 {
  import Editor = __beyond_dep_ns_0.Editor;
  export const editorCommands: {
    readonly 'Normal text': (editor: Editor) => void;
    readonly 'Heading 1': (editor: Editor) => void;
    readonly 'Heading 2': (editor: Editor) => void;
    readonly 'Heading 3': (editor: Editor) => void;
    readonly 'Heading 4': (editor: Editor) => void;
    readonly 'Heading 5': (editor: Editor) => void;
    readonly 'Heading 6': (editor: Editor) => void;
    readonly Quote: (editor: Editor) => void;
    readonly 'Clear formatting': (editor: Editor) => void;
  };
  export type StyleCommand = keyof typeof editorCommands;
}


// toolbar\index.ts
declare namespace ns_7 {
  export { Button } from './button';
  export { Section } from './section';
  export { TextStyleSelector } from './text-style-selector';
  export { StyleOption } from './style-option';
  export { BUTTONS, GROUPS } from './config';
  export type { IButton } from './config';
  export type { IStyleOption, IStyleOptionProps } from './types';
  export { generateButtonAction, generateButtonIsActive, generateButtonIcon } from './actions';
}


// toolbar\section.tsx
declare namespace ns_8 {
  import Editor = __beyond_dep_ns_0.Editor;
  import GROUPS = ns_5.GROUPS;
  interface ISectionProps {
    editor: Editor;
    group: keyof typeof GROUPS;
  }
  export const Section: ({
    editor,
    group
  }: ISectionProps) => JSX.Element;
  export {};
}


// toolbar\style-option.tsx
declare namespace ns_9 {
  import React = __beyond_dep_ns_1;
  import IStyleOptionProps = ns_11.IStyleOptionProps;
  export const StyleOption: React.FC<IStyleOptionProps>;
}


// toolbar\text-style-selector.tsx
declare namespace ns_10 {
  import Editor = __beyond_dep_ns_0.Editor;
  interface ITextStyleSelectorProps {
    editor: Editor;
  }
  export const TextStyleSelector: ({
    editor
  }: ITextStyleSelectorProps) => JSX.Element;
  export {};
}


// toolbar\types.ts
declare namespace ns_11 {
  export interface IStyleOption {
    label: string;
    style: string;
    className: string;
    shortcut: string;
    command: (editor: any) => void;
  }
  export interface IStyleOptionProps {
    option: IStyleOption;
    editor: any;
    onClose: () => void;
  }
}


// types\index.ts
declare namespace ns_12 {
  export interface IWikiEditorProps {
    onChange?: (content: string) => void;
    onMarkdownChange?: (markdown: string) => void;
    initialContent?: string;
    placeholder?: string;
    className?: string;
    showToolbar?: boolean;
    outputFormat?: 'html' | 'markdown';
    markdownOptions?: IMarkdownOptions;
  }
  export interface IMarkdownOptions {
    headingStyle?: 'setext' | 'atx';
    codeBlockStyle?: 'indented' | 'fenced';
    bulletListMarker?: '-' | '+' | '*';
    emDelimiter?: '_' | '*';
    strongDelimiter?: '__' | '**';
    hr?: string;
  }
  export interface IHtmlToMarkdownOptions {
    headingStyle?: 'setext' | 'atx';
    codeBlockStyle?: 'indented' | 'fenced';
    bulletListMarker?: '-' | '+' | '*';
    emDelimiter?: '_' | '*';
    strongDelimiter?: '__' | '**';
    hr?: string;
  }
}


// utils\html-to-markdown.ts
declare namespace ns_13 {
  interface IHtmlToMarkdownOptions {
    headingStyle?: 'setext' | 'atx';
    codeBlockStyle?: 'indented' | 'fenced';
    bulletListMarker?: '-' | '+' | '*';
    emDelimiter?: '_' | '*';
    strongDelimiter?: '__' | '**';
    hr?: string;
  }
  export function htmlToMarkdown(html: string, options?: IHtmlToMarkdownOptions): string;
  export {};
}


// wiki-editor-ui.tsx
declare namespace ns_14 {
  interface IWikiEditorUIProps {
    onChange?: (content: string) => void;
    initialContent?: string;
    placeholder?: string;
    className?: string;
  }
  export const WikiEditorUI: ({
    onChange,
    initialContent,
    placeholder,
    className
  }: IWikiEditorUIProps) => JSX.Element;
  export {};
}


// wiki-editor.tsx
declare namespace ns_15 {
  import IWikiEditorProps = ns_12.IWikiEditorProps;
  export const WikiEditor: ({
    onChange,
    onMarkdownChange,
    initialContent,
    placeholder,
    className,
    showToolbar,
    outputFormat,
    markdownOptions
  }: IWikiEditorProps) => JSX.Element;
}



export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };