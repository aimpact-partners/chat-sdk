/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from 'zod';
import * as __beyond_dep_ns_1 from '@beyond-js/events/events';
// index.ts
declare namespace ns_0 {
  import ZodTypeAny = __beyond_dep_ns_0.ZodTypeAny;
  import ZodObject = __beyond_dep_ns_0.ZodObject;
  import ReactiveProps = ns_2.ReactiveProps;
  import PropertyValidationErrors = ns_2.PropertyValidationErrors;
  import SetPropertiesResult = ns_2.SetPropertiesResult;
  import Timeout = ns_2.Timeout;
  import ProxyBase = ns_1.ProxyBase;
  export class ReactiveModel<T> extends ProxyBase<T> {
    #private;
    _reactiveProps: Record<string, any>;
    protected properties: any[];
    debounceTimeout: Timeout | null;
    processing: boolean;
    processed: boolean;
    fetching: boolean;
    loaded: boolean;
    get ready(): boolean;
    set ready(value: boolean);
    protected schema: ZodObject<Record<string, ZodTypeAny>>;
    get isDraft(): boolean;
    get initialValues(): Partial<T>;
    /**
     * Defines if the model has been modified since it was loaded.
     */
    get unpublished(): boolean;
    /**
     * @deprecated Use `unpublished` instead.
     */
    get isUnpublished(): boolean;
    constructor({
      properties,
      ...props
    }?: ReactiveProps<T>);
    protected setInitialValues(specs?: Partial<T>): Partial<T>;
    protected defineReactiveProp(propKey: string, initialValue: any, model?: boolean): void;
    protected defineReactiveProps(props: string[], values?: any): void;
    protected reactiveProps(props: string[]): void;
    getProperty(propKey: string): any;
    setProperty(propKey: string, value: any): void;
    private validateProperty;
    private isSameObject;
    validate(properties: any): {
      valid: boolean;
      errors: PropertyValidationErrors<T>;
    };
    set(properties: Partial<T>): SetPropertiesResult;
    getProperties(): Partial<T>;
    /**
     * Triggers an event after a specified delay.
     *
     * @param {string} event - The name of the event to trigger.
     * @param {Record<string, any>} params - Additional parameters for the event, including an optional `delay` property.
     */
    triggerEvent: (event?: string, params?: Record<string, any>) => void;
    revert(): void;
    saveChanges(): void;
  }
}


// proxy.ts
declare namespace ns_1 {
  import Events = __beyond_dep_ns_1.Events;
  export class ProxyBase<T> extends Events {
    constructor();
  }
}


// types\index.ts
declare namespace ns_2 {
  import ZodError = __beyond_dep_ns_0.ZodError;
  export type ModelProperties<T> = { [K in keyof T]: T[K] };
  export type PropertyValidationErrors<T> = Partial<Record<keyof T, ValidatedPropertyType>>;
  export type ReactiveProps<T> = {
    properties?: (keyof T)[];
  } & { [K in keyof T]?: any };
  export type Timeout = ReturnType<typeof setTimeout>;
  export interface ValidatedPropertyType {
    valid: boolean;
    error?: ZodError | null;
  }
  export interface TriggerEventParams {
    event: string;
    delay?: number;
    specs?: any;
  }
  export type TriggerEventInput = string | TriggerEventParams;
  export type SetPropertiesResult = {
    updated: boolean;
    errors?: PropertyValidationErrors<any>;
  };
}


export import ReactiveModel = ns_0.ReactiveModel;
export import ModelProperties = ns_2.ModelProperties;
export import ReactiveProps = ns_2.ReactiveProps;
export import SetPropertiesResult = ns_2.SetPropertiesResult;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };