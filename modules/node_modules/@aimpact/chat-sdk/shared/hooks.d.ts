/************
Processor: ts
************/

// use-hmr.tsx
declare namespace ns_0 {
  export function useHmr(hmr: any): {}[];
}


// use-media-query.ts
declare namespace ns_1 {
  export function useMediaQuery(): string;
}


// use-store.ts
declare namespace ns_2 {
  export interface IReactiveStore {
    on(event: string, handler: () => void): void;
    off(event: string, handler: () => void): void;
  }
  /**
   * A generic React hook that subscribes to a reactive store.
   * The store must implement `.on(event, handler)` and `.off(event, handler)`
   * to manage subscriptions, and emit events to trigger re-renders.
   * @param store The reactive store to subscribe to
   * @param events Array of event names to subscribe to. Defaults to ['change']
   */
  export function useStore<T extends IReactiveStore>(store: T, events?: string[], onListen?: () => void): T;
}


export import useHmr = ns_0.useHmr;
export import useMediaQuery = ns_1.useMediaQuery;
export import useStore = ns_2.useStore;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };