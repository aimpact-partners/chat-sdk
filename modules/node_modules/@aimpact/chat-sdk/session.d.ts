/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/reactive/model';
import * as __beyond_dep_ns_1 from '@aimpact/chat-sdk/users';
import * as __beyond_dep_ns_2 from 'firebase/app';
import * as __beyond_dep_ns_3 from 'firebase/auth';
import * as __beyond_dep_ns_4 from '@beyond-js/kernel/core';
// auth.ts
declare namespace ns_0 {
  import ReactiveModel = __beyond_dep_ns_0.ReactiveModel;
  import User = __beyond_dep_ns_1.User;
  import IUserData = ns_4.IUserData;
  export class Auth extends ReactiveModel<Auth> {
    #private;
    get user(): User;
    get session(): any;
    constructor(session: any, settings: any);
    onAuthStateChanged(user: IUserData): void;
    appLogin: (data: IUserData) => any;
    loginWith(provider: any): Promise<any>;
    getUserModel(specs: any): User;
    setUser(data: any): Promise<void>;
    signOut: () => Promise<void>;
    logout: () => Promise<void>;
  }
}


// error.ts
declare namespace ns_1 {
  export class CustomError extends Error {
    code: string;
    constructor(code: any, message: string);
  }
}


// firebase\provider.ts
declare namespace ns_2 {
  import ReactiveModel = __beyond_dep_ns_0.ReactiveModel;
  import FirebaseApp = __beyond_dep_ns_2.FirebaseApp;
  import Auth = __beyond_dep_ns_3.Auth;
  import IUserData = ns_4.IUserData;
  export class FirebaseProvider extends ReactiveModel<FirebaseProvider> {
    #private;
    get auth(): Auth;
    get app(): FirebaseApp;
    constructor(config: object, {
      onAuthStateChanged: callback
    }: {
      onAuthStateChanged?: (user: IUserData | null) => void;
    });
    private onAuthStateChanged;
    signInWithGoogle(): Promise<IUserData>;
    getCurrentToken(forceRefresh?: boolean): Promise<string | null>;
    logout(): Promise<void>;
    private getData;
  }
}


// index.ts
declare namespace ns_3 {
  import User = __beyond_dep_ns_1.User;
  import ReactiveModel = __beyond_dep_ns_0.ReactiveModel;
  import PendingPromise = __beyond_dep_ns_4.PendingPromise;
  import Auth = ns_0.Auth;
  interface ISession {
    logged: boolean;
  }
  class SessionManager extends ReactiveModel<ISession> {
    #private;
    get id(): any;
    get user(): User;
    get logged(): boolean;
    get isReady(): PendingPromise<boolean>;
    get auth(): Auth;
    constructor();
    settings(settings: any): void;
    listenReady(): void;
    logout(): Promise<boolean>;
  }
  export const sessionWrapper: SessionManager;
  export {};
}


// types.ts
declare namespace ns_4 {
  export interface IUserData {
    id: string;
    uid: string;
    email: string;
    name?: string;
    photoURL?: string;
    provider?: string;
    phoneNumber?: string;
    displayName: string;
  }
}


export import sessionWrapper = ns_3.sessionWrapper;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };