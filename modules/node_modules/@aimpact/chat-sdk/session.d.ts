/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@aimpact/chat-sdk/users';
import * as __beyond_dep_ns_1 from '@beyond-js/reactive/model';
import * as __beyond_dep_ns_2 from 'firebase/auth';
import * as __beyond_dep_ns_3 from '@firebase/auth';
import * as __beyond_dep_ns_4 from '@beyond-js/kernel/core';
// auth.ts
declare namespace ns_0 {
  import User = __beyond_dep_ns_0.User;
  import ReactiveModel = __beyond_dep_ns_1.ReactiveModel;
  export class Auth extends ReactiveModel<Auth> {
    #private;
    get user(): User;
    get session(): any;
    constructor(session: any);
    onRedirectResult(data: any): Promise<void>;
    onAuthStateChanged(data: any): Promise<void>;
    setUser(data: any): Promise<void>;
    getUserModel(specs: any): Promise<User>;
    appLogin: (user: any) => Promise<any>;
    login: (email: string, password: string) => Promise<any>;
    0: any;
    signInWithGoogle: () => Promise<any>;
    registerWithEmail: (email: string, password: string, username: string) => Promise<any>;
    resetPassword: (email: string) => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
    }>;
    confirmPasswordReset: (code: string, newPassword: string) => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
    }>;
    signOut: () => Promise<void>;
    logout: () => Promise<void>;
  }
}


// firebase\config.ts
declare namespace ns_1 {
  import GoogleAuthProvider = __beyond_dep_ns_2.GoogleAuthProvider;
  import FacebookAuthProvider = __beyond_dep_ns_2.FacebookAuthProvider;
  export const auth: Auth;
  export const googleProvider: GoogleAuthProvider;
  export const facebookProvider: FacebookAuthProvider;
}


// index.ts
declare namespace ns_2 {
  import User = __beyond_dep_ns_0.User;
  import ReactiveModel = __beyond_dep_ns_1.ReactiveModel;
  import PendingPromise = __beyond_dep_ns_4.PendingPromise;
  import Auth = ns_0.Auth;
  interface ISession {
    logged: boolean;
  }
  class SessionManager extends ReactiveModel<ISession> {
    #private;
    triggerEvent: (event: string) => void;
    get user(): User;
    get userId(): string;
    get logged(): boolean;
    get isReady(): PendingPromise<boolean>;
    get auth(): Auth;
    constructor();
    listenReady(): void;
    signInWithGoogle(): Promise<any>;
    registerWithEmail({
      email,
      password,
      username
    }: {
      email: any;
      password: any;
      username: any;
    }): Promise<any>;
    logout(): Promise<boolean>;
  }
  export const sessionWrapper: SessionManager;
  export {};
}


export import sessionWrapper = ns_2.sessionWrapper;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };