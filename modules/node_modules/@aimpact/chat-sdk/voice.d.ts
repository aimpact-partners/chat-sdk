/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/kernel/core';
import * as __beyond_dep_ns_1 from '@beyond-js/reactive/model';
// manager.ts
declare namespace ns_0 {
  export class VoiceManager {
    #private;
    private list;
    private loaded;
    private onReady;
    private defaults;
    constructor();
    private loadDefaults;
    private saveDefaults;
    setDefault(lang: string, name: string): void;
    setDefaults(defaults: Record<string, string>): void;
    private init;
    get onBackCallback(): () => void;
    set onBackCallback(callback: () => void);
    onBack(): void;
    ready(): Promise<void>;
    get all(): SpeechSynthesisVoice[];
    byLang(lang: string): SpeechSynthesisVoice[];
    byName(name: string): SpeechSynthesisVoice | undefined;
    getVoice(lang: string): SpeechSynthesisVoice | undefined;
    getDefault(lang: string): SpeechSynthesisVoice | undefined;
  }
  export const voiceManager: VoiceManager;
}


// voice-lab.ts
declare namespace ns_1 {
  import Events = __beyond_dep_ns_0.Events;
  export class VoiceLab extends Events {
    #private;
    get audio(): any;
    stop(): void;
    get blob(): any;
    play(text: string): Promise<void>;
  }
}


// voice.ts
declare namespace ns_2 {
  import ReactiveModel = __beyond_dep_ns_1.ReactiveModel;
  export interface IVoice {
    language: any;
    lang: any;
    rate: any;
  }
  export class Voice extends ReactiveModel<IVoice> {
    #private;
    get speaking(): boolean;
    get text(): string;
    set text(value: string);
    get currentWord(): number;
    get paused(): boolean;
    get lang(): any;
    set lang(value: any);
    trigger: any;
    get instance(): any;
    get rate(): number;
    set rate(value: number);
    positionToCut: any;
    get languages(): {
      en: string;
      es: string;
      pr: string;
    };
    constructor({
      language,
      rate
    }?: {
      language?: string;
      rate?: number;
    });
    _web(): Promise<void>;
    _splitText(text: string, maxLength: number): string[];
    play(text?: string, id?: string): void;
    stop(): void;
  }
}


export import VoiceManager = ns_0.VoiceManager;
export import voiceManager = ns_0.voiceManager;
export import VoiceLab = ns_1.VoiceLab;
export import Voice = ns_2.Voice;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };