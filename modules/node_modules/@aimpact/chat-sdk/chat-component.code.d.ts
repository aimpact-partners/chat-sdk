/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@aimpact/reactive/model';
import * as __beyond_dep_ns_1 from '@aimpact/chat-sdk/voice';
import * as __beyond_dep_ns_2 from '@aimpact/chat-sdk/core';
import * as __beyond_dep_ns_3 from '@beyond-js/kernel/texts';
import __beyond_dep_def_4 from 'react';
// interfaces\messages.ts
declare namespace ns_0 {
  export interface IMessages {
    role: 'user' | 'system';
    text: string;
  }
}


// store\audio.ts
declare namespace ns_1 {
  import ReactiveModel = __beyond_dep_ns_0.ReactiveModel;
  import Voice = __beyond_dep_ns_1.Voice;
  import Recorder = ns_3.Recorder;
  interface IStore {
    recordings: [];
  }
  export class AudioManager extends ReactiveModel<IStore> {
    #private;
    fetching: boolean;
    autoplay: boolean;
    get recorder(): Recorder;
    get player(): Voice;
    constructor(parent: any);
    listenAppChanges: () => void;
    selectPlayer(name: any): void;
  }
  export {};
}


// store\index.ts
declare namespace ns_2 {
  import ReactiveModel = __beyond_dep_ns_0.ReactiveModel;
  import Chat = __beyond_dep_ns_2.Chat;
  import AudioManager = ns_1.AudioManager;
  import CurrentTexts = __beyond_dep_ns_3.CurrentTexts;
  import IStore = ns_4.IStore;
  export class StoreManager extends ReactiveModel<IStore> implements IStore {
    #private;
    waitingResponse: boolean;
    autoplay: boolean;
    fetching: boolean;
    get messages(): __beyond_dep_ns_2.ns_7.Message[];
    get name(): string;
    get category(): string;
    get chat(): Chat;
    get model(): Chat;
    get chats(): any[];
    get textsModel(): CurrentTexts<StoreManager>;
    get texts(): StoreManager;
    get audioManager(): AudioManager;
    get proccessTranscription(): boolean;
    get selectedModel(): string;
    set selectedModel(model: string);
    get notFound(): boolean;
    set notFound(notFound: boolean);
    get currentMessage(): any;
    set currentMessage(message: any);
    get disabled(): any;
    set disabled(disabled: any);
    get extensions(): Map<any, any>;
    get ready(): boolean;
    constructor(id: any);
    load: (id: string) => Promise<void>;
    sendMessage(content: string): Promise<__beyond_dep_ns_2.ns_7.Message>;
    sendAudio(content: Blob): Promise<__beyond_dep_ns_2.ns_7.Message>;
    transcribe(audio: Blob): Promise<any>;
    unmount(): void;
    clean(): void;
  }
}


// store\recorder.ts
declare namespace ns_3 {
  import ReactiveModel = __beyond_dep_ns_0.ReactiveModel;
  export class Recorder extends ReactiveModel<Recorder> {
    #private;
    get chunks(): Blob[];
    get status(): any;
    get recording(): boolean;
    get error(): string;
    get valid(): boolean;
    get audio(): any;
    get analyser(): any;
    get transcription(): string;
    constructor();
    hasPermissions(): Promise<boolean>;
    init(): Promise<void>;
    getSpeechRecognition(): void;
    initialise(specs?: {}): Promise<any>;
    record(specs?: {
      analyser: boolean;
    }): any;
    stopStream: () => void;
    stop(): any;
  }
}


// store\types.ts
declare namespace ns_4 {
  export interface IStore {
    autoplay?: boolean;
    waitingResponse?: boolean;
    fetching?: boolean;
  }
}


// views\chat\back-arrow.tsx
declare namespace ns_5 {
  import React = __beyond_dep_def_4;
  export function BackArrow({
    store,
    separator
  }: {
    store: any;
    separator: any;
  }): React.JSX.Element;
}


// views\chat\global.tsx
declare namespace ns_6 {
  global {
    namespace JSX {
      interface IntrinsicElements {
        'class-intro': {};
      }
    }
  }
  export {};
}


// views\chat\index.tsx
declare namespace ns_7 {
  /// <reference types="react" />
  export function Chat(): JSX.Element;
}


// views\chat\skeleton.tsx
declare namespace ns_8 {
  import React = __beyond_dep_def_4;
  export function ChatSkeleton(): React.JSX.Element;
}


// views\chat\use-extension.tsx
declare namespace ns_9 {
  export function useExtension(name: any): any[];
}


// views\container.tsx
declare namespace ns_10 {
  import React = __beyond_dep_def_4;
  import IAgentsContainerProps = ns_26.IAgentsContainerProps;
  export function AgentsChatContainer({
    children,
    icon,
    autoplay,
    empty,
    player,
    ...props
  }: Partial<IAgentsContainerProps>): React.JSX.Element;
}


// views\context.tsx
declare namespace ns_11 {
  import React = __beyond_dep_def_4;
  import StoreManager = ns_2.StoreManager;
  import Voice = __beyond_dep_ns_1.Voice;
  import VoiceLab = __beyond_dep_ns_1.VoiceLab;
  import Recorder = ns_3.Recorder;
  interface IChatContext {
    messages?: any[];
    store: StoreManager;
    autoplay?: boolean;
    recorder?: Recorder;
    player: Voice | VoiceLab;
    texts: any;
    attributes: Map<string, any>;
    setScrollPosition: (position: string) => void;
    scrollPosition: string;
    systemIcon: string;
    ready: boolean;
    empty: React.ElementType;
  }
  export const ChatContext: React.Context<Partial<IChatContext>>;
  export const useChatContext: () => Partial<IChatContext>;
  export {};
}


// views\index.tsx
declare namespace ns_12 {
  import React = __beyond_dep_def_4;
  /**
   * Main component of the chat web component
   * @param param0 =
   * @returns
   */
  export function AgentsChatPanel(): React.JSX.Element;
}


// views\input\action-button.tsx
declare namespace ns_13 {
  import React = __beyond_dep_def_4;
  export function InputActionButton({
    buttonIsDisabled
  }: {
    buttonIsDisabled: any;
  }): React.JSX.Element;
}


// views\input\context.tsx
declare namespace ns_14 {
  import React = __beyond_dep_def_4;
  import Recorder = ns_3.Recorder;
  import StoreManager = ns_2.StoreManager;
  export interface IInputContext {
    store: StoreManager;
    onSubmit: (message: any) => void;
    recorder: Recorder;
    recording: any;
    disabled?: boolean;
    fetching?: boolean;
    setRecording: (recording: boolean) => void;
    setFetching: (recording: boolean) => void;
    autoTranscribe: boolean;
    text?: string;
    setText: (text: string) => void;
  }
  export const InputContext: React.Context<IInputContext>;
  export const useInputContext: () => IInputContext;
}


// views\input\hooks\use-input-form.tsx
declare namespace ns_15 {
  import React = __beyond_dep_def_4;
  export function useInputForm(): {
    recording: boolean;
    text: string;
    setText: React.Dispatch<React.SetStateAction<string>>;
    setFetching: React.Dispatch<React.SetStateAction<boolean>>;
    setRecording: React.Dispatch<React.SetStateAction<boolean>>;
    fetching: boolean;
    onSubmit: (event: any) => Promise<void>;
  };
}


// views\input\index.tsx
declare namespace ns_16 {
  import React = __beyond_dep_def_4;
  import IAgentsInputProps = ns_24.IAgentsInputProps;
  export const AgentsChatInput: ({
    isWaiting,
    autoTranscribe,
    disabled,
    onClick
  }: Partial<IAgentsInputProps>) => React.JSX.Element;
}


// views\input\recording\error-modal.tsx
declare namespace ns_17 {
  import React = __beyond_dep_def_4;
  export const PermissionsErrorModal: ({
    show,
    onClose
  }: {
    show: any;
    onClose: any;
  }) => React.JSX.Element;
}


// views\input\recording\index.tsx
declare namespace ns_18 {
  import React = __beyond_dep_def_4;
  export const RecordingButton: ({
    disabled
  }: {
    disabled?: boolean;
  }) => React.JSX.Element;
}


// views\input\recording\modal.tsx
declare namespace ns_19 {
  import React = __beyond_dep_def_4;
  export const PermissionsModal: ({
    show,
    onClose,
    onConfirm
  }: {
    show: any;
    onClose: any;
    onConfirm: any;
  }) => React.JSX.Element;
}


// views\input\recording\player.tsx
declare namespace ns_20 {
  import React = __beyond_dep_def_4;
  export const Player: () => React.JSX.Element;
}


// views\input\text-input.tsx
declare namespace ns_21 {
  import React = __beyond_dep_def_4;
  export function TextInput({
    setFetching,
    setText,
    handleSend,
    fetching,
    text,
    disabled
  }: {
    setFetching: any;
    setText: any;
    handleSend: any;
    fetching: any;
    text: any;
    disabled: any;
  }): React.JSX.Element;
}


// views\input\timer\index.tsx
declare namespace ns_22 {
  /// <reference types="react" />
  interface TimerProps {
    action?: 'start' | 'stop' | 'restart';
  }
  export function Timer({
    action
  }: TimerProps): JSX.Element;
  export {};
}


// views\input\timer\use-timer.tsx
declare namespace ns_23 {
  export function useTimer(isRunning: boolean, restart: boolean): [number, number, number, number];
}


// views\input\types\agents-input.tsx
declare namespace ns_24 {
  export interface IAgentsInputProps {
    isWaiting?: boolean;
    autoTranscribe: boolean;
    onAudioSend?: (audio: Blob) => void;
    onTextSend?: (text: string) => void;
    beforeSend: () => void;
    onClick: () => void;
    disabled: boolean;
  }
}


// views\not-found.tsx
declare namespace ns_25 {
  import React = __beyond_dep_def_4;
  export function ChatNotFound(): React.JSX.Element;
}


// views\types.ts
declare namespace ns_26 {
  import React = __beyond_dep_def_4;
  export interface IAgentsContainerProps {
    id: string;
    children: React.ReactNode;
    icon: string;
    autoplay: boolean;
    empty: React.ComponentType;
    player: any;
    attributes: any;
  }
}


// views\use-manager.tsx
declare namespace ns_27 {
  import StoreManager = ns_2.StoreManager;
  export function useManager(id: any): {
    ready: boolean;
    store: StoreManager;
  };
}


// views\widget\index.tsx
declare namespace ns_28 {
  import React = __beyond_dep_def_4;
  /**
   * Main component of the chat web component
   * @param param0 =
   * @returns
   */
  export function View({
    store,
    ...props
  }: {
    [x: string]: any;
    store: any;
  }): React.JSX.Element;
}


export import AudioManager = ns_1.AudioManager;
export import Recorder = ns_3.Recorder;
export import Chat = ns_7.Chat;
export import AgentsChatContainer = ns_10.AgentsChatContainer;
export import ChatContext = ns_11.ChatContext;
export import useChatContext = ns_11.useChatContext;
export import AgentsChatPanel = ns_12.AgentsChatPanel;
export import AgentsChatInput = ns_16.AgentsChatInput;
export import PermissionsErrorModal = ns_17.PermissionsErrorModal;
export import RecordingButton = ns_18.RecordingButton;
export import PermissionsModal = ns_19.PermissionsModal;
export import IAgentsContainerProps = ns_26.IAgentsContainerProps;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };