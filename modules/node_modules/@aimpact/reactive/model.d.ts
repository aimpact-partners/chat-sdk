/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from 'zod';
import * as __beyond_dep_ns_1 from '@beyond-js/events/events';
// example.ts
declare namespace ns_0 {
  import ReactiveModel = ns_1.ReactiveModel;
  interface IExample {
    name: string;
    id: string;
  }
  export class Example extends ReactiveModel<IExample> {
    name: string;
    id: string;
    pepito: string;
    constructor({
      ...args
    }?: Partial<IExample>);
    print(): string;
  }
  export {};
}


// index.ts
declare namespace ns_1 {
  import ZodTypeAny = __beyond_dep_ns_0.ZodTypeAny;
  import ZodObject = __beyond_dep_ns_0.ZodObject;
  import PropertyValidationErrors = ns_4.PropertyValidationErrors;
  import SetPropertiesResult = ns_4.SetPropertiesResult;
  import Timeout = ns_4.Timeout;
  import IReactiveModelOptions = ns_4.IReactiveModelOptions;
  import ReactiveProperty = ns_4.ReactiveProperty;
  import EntityProperty = ns_4.EntityProperty;
  import Events = __beyond_dep_ns_1.Events;
  export class ReactiveModel<T> extends Events {
    #private;
    debounceTimeout: Timeout | null;
    processing: boolean;
    processed: boolean;
    fetching: boolean;
    loaded: boolean;
    private _reactiveProps;
    get isReactive(): boolean;
    protected properties: EntityProperty<T>[];
    get isDraft(): boolean;
    get ready(): boolean;
    set ready(value: boolean);
    protected schema: ZodObject<Record<string, ZodTypeAny>>;
    get initialValues(): Partial<T>;
    /**
     * Defines if the model has been modified since it was loaded.
     */
    get unpublished(): boolean;
    /**
     * @deprecated Use `unpublished` instead.
     */
    get isUnpublished(): boolean;
    constructor({
      properties,
      ...props
    }?: IReactiveModelOptions<T>);
    protected setInitialValues(specs?: Partial<T>): Partial<T>;
    getProperty<K extends keyof T>(key: K): T[K];
    property: <K extends keyof T>(key: K) => T[K];
    protected defineReactiveProp<K extends keyof T>(propKey: string, initialValue: any, model?: boolean): void;
    /**
     *  Defines the reactive properties of the object.
     * The properties are defined as an array of strings or objects.
     * The objects must have a `name` property with the name of the property and a `value` property with the class of the object.
     * The `value` property can be a class or an object.
     * If the `value` property is a class, the class must extend the `ReactiveModel` class.
     *
     * @param props
     * @param values
     */
    protected defineReactiveProps(props: ReactiveProperty<T>[], values?: any): void;
    protected reactiveProps(props: ReactiveProperty<T>[]): void;
    setProperty(propKey: string, value: any): void;
    private validateProperty;
    private isSameObject;
    validate(properties: any): {
      valid: boolean;
      errors: PropertyValidationErrors<T>;
    };
    set(properties: Partial<T>): SetPropertiesResult;
    getProperties(): Partial<T>;
    /**
     * Triggers an event after a specified delay.
     *
     * @param {string} event - The name of the event to trigger.
     * @param {Record<string, any>} params - Additional parameters for the event, including an optional `delay` property.
     */
    triggerEvent: (event?: string, params?: Record<string, any>) => void;
    revert(): void;
    saveChanges(): void;
  }
}


// list.ts
declare namespace ns_2 {
  import Events = __beyond_dep_ns_1.Events;
  export class ReactiveList<T> extends Events {}
}


// proxy.ts
declare namespace ns_3 {
  import Events = __beyond_dep_ns_1.Events;
  export class ProxyBase<T> extends Events {
    constructor();
  }
}


// types\index.ts
declare namespace ns_4 {
  import ZodError = __beyond_dep_ns_0.ZodError;
  export type ModelProperties<T> = any;
  export type PropertyValidationErrors<T> = Partial<Record<keyof T, ValidatedPropertyType>>;
  export type IReactiveModelOptions<T> = {
    properties?: EntityProperty<T>[];
  } & { [K in keyof T]?: any };
  export type Timeout = ReturnType<typeof setTimeout>;
  export interface ValidatedPropertyType {
    valid: boolean;
    error?: ZodError | null;
  }
  export interface TriggerEventParams {
    event: string;
    delay?: number;
    specs?: any;
  }
  export type TriggerEventInput = string | TriggerEventParams;
  export type SetPropertiesResult = {
    updated: boolean;
    errors?: PropertyValidationErrors<any>;
  };
  export type EntityProperty<T> = keyof T | ReactiveObjectProperty<T>;
  export type DefaultProps = 'fetching' | 'fetched' | 'processing' | 'processed' | 'loaded';
  /**
   * Represents a reactive property which is another ReactiveModel instance.
   */
  export type ReactiveObjectProperty<T> = {
    name: keyof T;
    value: any;
    properties: any;
  };
  export type ReactiveProperty<T> = keyof T | DefaultProps | ReactiveObjectProperty<T> | string;
}


export import ReactiveModel = ns_1.ReactiveModel;
export import ModelProperties = ns_4.ModelProperties;
export import IReactiveModelOptions = ns_4.IReactiveModelOptions;
export import SetPropertiesResult = ns_4.SetPropertiesResult;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };